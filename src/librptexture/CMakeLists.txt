# rom-properties texture decoding library
CMAKE_MINIMUM_REQUIRED(VERSION 3.0)
CMAKE_POLICY(SET CMP0048 NEW)
IF(POLICY CMP0063)
	# CMake 3.3: Enable symbol visibility presets for all
	# target types, including static libraries and executables.
	CMAKE_POLICY(SET CMP0063 NEW)
ENDIF(POLICY CMP0063)
PROJECT(rptexture LANGUAGES CXX)

# OpenMP (TODO: AUTO/ON/OFF?)
OPTION(ENABLE_OPENMP "Enable OpenMP support if available." ON)
IF(ENABLE_OPENMP)
	FIND_PACKAGE(OpenMP)
	IF(OpenMP_FOUND)
		SET(HAVE_OPENMP 1)
		IF(NOT MSVC AND NOT OpenMP_CXX_LIB_NAMES)
			# Prior to CMake 3.9, FindOpenMP didn't set
			# library names. This breaks on Ubuntu 16.04,
			# which uses CMake 3.5.
			# NOTE: FIND_LIBRARY(gomp) doesn't work...
			FIND_PACKAGE(Threads REQUIRED)
			SET(OpenMP_CXX_LIB_NAMES -lgomp ${CMAKE_THREAD_LIBS_INIT})
		ENDIF(NOT MSVC AND NOT OpenMP_CXX_LIB_NAMES)
	ENDIF(OpenMP_FOUND)
ENDIF(ENABLE_OPENMP)

# Sources.
SET(${PROJECT_NAME}_SRCS
	FileFormatFactory.cpp

	img/rp_image.cpp
	img/rp_image_backend.cpp
	img/rp_image_ops.cpp
	img/un-premultiply.cpp

	decoder/ImageDecoder_Linear.cpp
	decoder/ImageDecoder_GCN.cpp
	decoder/ImageDecoder_NDS.cpp
	decoder/ImageDecoder_N3DS.cpp
	decoder/ImageDecoder_S3TC.cpp
	decoder/ImageDecoder_DC.cpp
	decoder/ImageDecoder_ETC1.cpp
	decoder/ImageDecoder_BC7.cpp

	decoder/ImageSizeCalc.cpp
	decoder/PixelConversion.cpp

	fileformat/FileFormat.cpp
	fileformat/ASTC.cpp
	fileformat/DidjTex.cpp
	fileformat/DirectDrawSurface.cpp
	fileformat/GodotSTEX.cpp
	fileformat/KhronosKTX.cpp
	fileformat/KhronosKTX2.cpp
	fileformat/PowerVR3.cpp
	fileformat/SegaPVR.cpp
	fileformat/TGA.cpp
	fileformat/ValveVTF.cpp
	fileformat/ValveVTF3.cpp
	fileformat/XboxXPR.cpp

	data/DX10Formats.cpp
	data/GLenumStrings.cpp
	data/VkEnumStrings.cpp
	)
# Headers.
SET(${PROJECT_NAME}_H
	FileFormatFactory.hpp
	argb32_t.hpp

	img/rp_image.hpp
	img/rp_image_p.hpp
	img/rp_image_backend.hpp

	decoder/ImageDecoder.hpp
	decoder/ImageDecoder_p.hpp
	decoder/ImageSizeCalc.hpp
	decoder/PixelConversion.hpp

	fileformat/FileFormat.hpp
	fileformat/FileFormat_p.hpp
	fileformat/FileFormat_decl.hpp
	fileformat/ASTC.hpp
	fileformat/DidjTex.hpp
	fileformat/DirectDrawSurface.hpp
	fileformat/GodotSTEX.hpp
	fileformat/KhronosKTX.hpp
	fileformat/KhronosKTX2.hpp
	fileformat/PowerVR3.hpp
	fileformat/SegaPVR.hpp
	fileformat/TGA.hpp
	fileformat/ValveVTF.hpp
	fileformat/ValveVTF3.hpp
	fileformat/XboxXPR.hpp

	fileformat/astc_structs.h
	fileformat/dds_structs.h
	fileformat/didj_tex_structs.h
	fileformat/godot_stex_structs.h
	fileformat/ktx_structs.h
	fileformat/ktx_structs.h
	fileformat/pvr_structs.h
	fileformat/pvr3_structs.h
	fileformat/vtf_structs.h
	fileformat/vtf3_structs.h
	fileformat/xbox_xpr_structs.h

	fileformat/gl_defs.h
	fileformat/vk_defs.h

	data/DX10Formats.hpp
	data/GLenumStrings.hpp
	data/VkEnumStrings.hpp
	)

IF(WIN32)
	SET(${PROJECT_NAME}_OS_SRCS
		img/GdiplusHelper.cpp
		img/RpGdiplusBackend.cpp
		)
	SET(${PROJECT_NAME}_OS_H
		img/GdiplusHelper.hpp
		img/RpGdiplusBackend.hpp
		)
ENDIF(WIN32)

IF(ENABLE_PVRTC)
	SET(${PROJECT_NAME}_SRCS ${${PROJECT_NAME}_SRCS} decoder/ImageDecoder_PVRTC.cpp)
ENDIF(ENABLE_PVRTC)
IF(ENABLE_ASTC)
	SET(${PROJECT_NAME}_SRCS ${${PROJECT_NAME}_SRCS} decoder/ImageDecoder_ASTC.cpp)
ENDIF(ENABLE_ASTC)

# CPU-specific and optimized sources.
INCLUDE(CPUInstructionSetFlags)
IF(CPU_i386 OR CPU_amd64)
	# MSVC does not support MMX intrinsics in 64-bit builds.
	# Reference: https://docs.microsoft.com/en-us/cpp/cpp/m64?view=msvc-160
	#
	# amd64 CPUs support SSE2 as a minimum anyway, so there's
	# no point in building MMX code for 64-bit.
	SET(${PROJECT_NAME}_SSE2_SRCS
		img/rp_image_ops_sse2.cpp
		decoder/ImageDecoder_Linear_sse2.cpp
		)
	SET(${PROJECT_NAME}_SSSE3_SRCS
		img/rp_image_ops_ssse3.cpp
		decoder/ImageDecoder_Linear_ssse3.cpp
		)
	# TODO: Disable SSE 4.1 if not supported by the compiler?
	SET(${PROJECT_NAME}_SSE41_SRCS
		img/un-premultiply_sse41.cpp
		)

	# IFUNC functionality
	INCLUDE(CheckIfuncSupport)
	CHECK_IFUNC_SUPPORT()
	IF(HAVE_IFUNC)
		SET(${PROJECT_NAME}_IFUNC_SRCS decoder/ImageDecoder_ifunc.cpp)
		# Disable LTO on the IFUNC files if LTO is known to be broken.
		IF(GCC_5xx_LTO_ISSUES)
			SET_SOURCE_FILES_PROPERTIES(${${PROJECT_NAME}_IFUNC_SRCS}
				APPEND_STRING PROPERTIES COMPILE_FLAGS " -fno-lto ")
		ENDIF(GCC_5xx_LTO_ISSUES)
	ENDIF(HAVE_IFUNC)

	IF(MMX_FLAG)
		SET_SOURCE_FILES_PROPERTIES(${${PROJECT_NAME}_MMX_SRCS}
			APPEND_STRING PROPERTIES COMPILE_FLAGS " ${MMX_FLAG} ")
	ENDIF(MMX_FLAG)

	IF(SSE2_FLAG)
		SET_SOURCE_FILES_PROPERTIES(${${PROJECT_NAME}_SSE2_SRCS}
			APPEND_STRING PROPERTIES COMPILE_FLAGS " ${SSE2_FLAG} ")
	ENDIF(SSE2_FLAG)

	IF(SSSE3_FLAG)
		SET_SOURCE_FILES_PROPERTIES(${${PROJECT_NAME}_SSSE3_SRCS}
			APPEND_STRING PROPERTIES COMPILE_FLAGS " ${SSSE3_FLAG} ")
	ENDIF(SSSE3_FLAG)

	IF(SSE41_FLAG)
		SET_SOURCE_FILES_PROPERTIES(${${PROJECT_NAME}_SSE41_SRCS}
			APPEND_STRING PROPERTIES COMPILE_FLAGS " ${SSE41_FLAG} ")
	ENDIF(SSE41_FLAG)
ENDIF()
UNSET(arch)

# Write the config.h files.
CONFIGURE_FILE("${CMAKE_CURRENT_SOURCE_DIR}/config.lib${PROJECT_NAME}.h.in" "${CMAKE_CURRENT_BINARY_DIR}/config.lib${PROJECT_NAME}.h")

# Precompiled headers.
IF(ENABLE_PCH)
	INCLUDE(PrecompiledHeader)
	SET(${PROJECT_NAME}_PCH_CXX stdafx.cpp)
	SET(${PROJECT_NAME}_PCH_SRC ${${PROJECT_NAME}_PCH_CXX})
	SET(${PROJECT_NAME}_PCH_H stdafx.h)
ENDIF(ENABLE_PCH)

######################
# Build the library. #
######################

ADD_LIBRARY(${PROJECT_NAME} STATIC
	${${PROJECT_NAME}_PCH_SRC} ${${PROJECT_NAME}_PCH_H}
	${${PROJECT_NAME}_SRCS} ${${PROJECT_NAME}_H}
	${${PROJECT_NAME}_OS_SRCS} ${${PROJECT_NAME}_OS_H}
	${${PROJECT_NAME}_IFUNC_SRCS}
	${${PROJECT_NAME}_MMX_SRCS}
	${${PROJECT_NAME}_SSE2_SRCS}
	${${PROJECT_NAME}_SSSE3_SRCS}
	${${PROJECT_NAME}_SSE41_SRCS}
	)
IF(ENABLE_PCH)
	ADD_PRECOMPILED_HEADER(${PROJECT_NAME} ${${PROJECT_NAME}_PCH_H}
		SOURCE_CXX ${${PROJECT_NAME}_PCH_CXX}
		)
ENDIF(ENABLE_PCH)
INCLUDE(SetMSVCDebugPath)
SET_MSVC_DEBUG_PATH(${PROJECT_NAME})

# TODO: More public/private library stuff.
TARGET_LINK_LIBRARIES(${PROJECT_NAME} PUBLIC rpcpu rpfile)
TARGET_LINK_LIBRARIES(${PROJECT_NAME} PRIVATE rpthreads)

# Include paths:
# - Public: Current source and binary directories.
# - Private: Parent source and binary directories,
#            and top-level binary directory for git_version.h.
TARGET_INCLUDE_DIRECTORIES(${PROJECT_NAME}
	PUBLIC  $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>		# librptexture
		$<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}>		# librptexture
	PRIVATE $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/..>	# src
		$<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}/..>	# src
		$<BUILD_INTERFACE:${CMAKE_BINARY_DIR}>			# build
	)
IF(ENABLE_NLS)
	TARGET_LINK_LIBRARIES(${PROJECT_NAME} PRIVATE i18n)
ENDIF(ENABLE_NLS)
IF(MSVC)
	TARGET_LINK_LIBRARIES(${PROJECT_NAME} PRIVATE delayimp)
ENDIF(MSVC)
IF(OpenMP_FOUND)
	TARGET_COMPILE_OPTIONS(${PROJECT_NAME} PUBLIC ${OpenMP_CXX_FLAGS})
	TARGET_LINK_LIBRARIES(${PROJECT_NAME} PUBLIC ${OpenMP_CXX_LIB_NAMES})
ENDIF(OpenMP_FOUND)
# Exclude from ALL builds.
SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES EXCLUDE_FROM_ALL TRUE)

# zlib
IF(NOT ZLIB_LIBRARY)
	MESSAGE(FATAL_ERROR "ZLIB_LIBRARY has not been set by CheckZLIB.cmake.")
ENDIF(NOT ZLIB_LIBRARY)
TARGET_INCLUDE_DIRECTORIES(${PROJECT_NAME} PRIVATE ${ZLIB_INCLUDE_DIRS})
TARGET_LINK_LIBRARIES(${PROJECT_NAME} PRIVATE ${ZLIB_LIBRARY})

# PowerVR Native SDK
IF(ENABLE_PVRTC)
	TARGET_LINK_LIBRARIES(${PROJECT_NAME} PRIVATE pvrtc)
ENDIF(ENABLE_PVRTC)

# ASTC decoder from Basis Universal
IF(ENABLE_ASTC)
	TARGET_LINK_LIBRARIES(${PROJECT_NAME} PRIVATE basisu_astc)
ENDIF(ENABLE_ASTC)

# Other libraries.
IF(WIN32)
	# libwin32common
	TARGET_LINK_LIBRARIES(${PROJECT_NAME} PRIVATE win32common)
	# Windows system libraries
	TARGET_LINK_LIBRARIES(${PROJECT_NAME} PRIVATE gdiplus)
ENDIF(WIN32)

# Unix: Add -fpic/-fPIC in order to use this static library in plugins.
IF(UNIX AND NOT APPLE)
	SET(CMAKE_C_FLAGS	"${CMAKE_C_FLAGS} -fpic -fPIC")
	SET(CMAKE_CXX_FLAGS	"${CMAKE_CXX_FLAGS} -fpic -fPIC")
ENDIF(UNIX AND NOT APPLE)

# Test suite.
IF(BUILD_TESTING)
	ADD_SUBDIRECTORY(tests)
ENDIF(BUILD_TESTING)
